{"version":3,"sources":["Store.js","Component/ListItems.js","Component/Input.js","Component/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["socket","user","CTX","React","createContext","initialState","General","Math","reducer","state","action","payload","from","msg","topic","type","sendChatAction","value","emit","newUsername","username","getUsername","Store","props","useReducer","allChats","dispatch","io","on","Provider","children","ListItems","callback","currIndex","topicIndex","ListItem","style","backgroundColor","button","onClick","ListItemText","primary","Input","useContext","classes","makeStyles","theme","textField","marginLeft","spacing","marginRight","useStyles","useState","changeUsername","TextField","label","className","onChange","e","target","onBlur","margin","variant","Dashboard","root","padding","textAlign","flex","display","topicsWindow","width","height","overflowY","chatWindow","borderLeft","chatLeft","chatTopic","chatBox","marginTop","messengerLeft","borderRadius","messengerRight","console","log","topics","Object","keys","activeTopic","changeActiveTopic","textValue","changeTextValue","currentIndex","changeCurrentIndex","Container","size","Paper","Typography","component","fontWeight","List","map","index","key","innerText","paddingLeft","paddingBottom","chat","length","maxWidth","onKeyDown","Button","color","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wfAoBO,IA6BHA,EAIAC,EAjCSC,EAAMC,IAAMC,gBAEnBC,EAAe,CACjBC,QAAS,GACTC,KAAM,IAGV,SAASC,EAAQC,EAAOC,GAAS,IAAD,EACCA,EAAOC,QAA5BC,EADoB,EACpBA,KAAMC,EADc,EACdA,IAAKC,EADS,EACTA,MACnB,OAAQJ,EAAOK,MACX,IAAK,kBACD,O,yVAAO,CAAP,GACON,EADP,eAGKK,EAHL,sBAKWL,EAAMK,IALjB,CAMQ,CACIF,OACAC,WAKhB,QACI,OAAOJ,GAKnB,SAASO,EAAeC,GACpBjB,EAAOkB,KAAK,eAAgBD,GAGhC,SAASE,EAAYC,GACjBnB,EAAOmB,EAGX,SAASC,IACL,OAAOpB,EAGI,SAASqB,EAAMC,GAAQ,IAAD,EACJpB,IAAMqB,WAAWhB,EAASH,GADtB,mBAC1BoB,EAD0B,KAChBC,EADgB,KASjC,OAPK1B,IACDA,EAAS2B,IAAG,UACLC,GAAG,gBAAgB,SAASf,GAC/Ba,EAAS,CAAEX,KAAM,kBAAmBJ,QAASE,OAKjD,kBAACX,EAAI2B,SAAL,CACIZ,MAAO,CAAEQ,WAAUT,iBAAgBf,OAAMkB,cAAaE,gBAErDE,EAAMO,U,sBC5CJC,EA5BG,SAAC,GAAgD,IAA9CjB,EAA6C,EAA7CA,MAAOkB,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAC7C,OACI,oCACKD,IAAcC,EACX,kBAACC,EAAA,EAAD,CACIC,MAAO,CACHC,gBAAiB,sBAErBC,QAAM,EACNC,QAASP,GAET,kBAACQ,EAAA,EAAD,CAAcC,QAAS3B,KAG3B,kBAACqB,EAAA,EAAD,CACIC,MAAO,CACHC,gBAAiB,IAErBC,QAAM,EACNC,QAASP,GAET,kBAACQ,EAAA,EAAD,CAAcC,QAAS3B,OCM5B4B,EA3BD,WAAM,IAERvB,EAAgBhB,IAAMwC,WAAWzC,GAAjCiB,YAQFyB,EANYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,UAAW,CACPC,WAAYF,EAAMG,QAAQ,GAC1BC,YAAaJ,EAAMG,QAAQ,OAGnBE,GAVA,EAWmBC,mBAAS,IAX5B,mBAWThC,EAXS,KAWCiC,EAXD,KAYhB,OACI,kBAACC,EAAA,EAAD,CACIC,MAAM,WACNC,UAAWZ,EAAQG,UACnB9B,MAAOG,EACPqC,SAAU,SAAAC,GACNL,EAAeK,EAAEC,OAAO1C,QAE5B2C,OAAQzC,EAAYC,GACpByC,OAAO,SACPC,QAAQ,cC8NLC,EAxOG,WACd,IA2CMnB,EA3CYC,aAAW,SAAAC,GAAK,MAAK,CACnCkB,KAAM,CACFH,OAAQ,qBACRI,QAASnB,EAAMG,QAAQ,EAAG,GAC1BiB,UAAW,SACX7B,gBAAiB,8BAErB8B,KAAM,CACFC,QAAS,QAGbC,aAAc,CACVC,MAAO,MACPC,OAAQ,QACRrB,YAAa,OACbsB,UAAW,QAEfC,WAAY,CACRH,MAAO,MACPI,WAAY,iBACZH,OAAQ,QACRC,UAAW,QAGfG,SAAU,CACNL,MAAO,OAEXM,UAAW,CACPf,OAAQ,SACRS,MAAO,OAEXO,QAAS,CACLC,UAAW,OACXR,MAAO,OAEXhC,OAAQ,CAAEgC,MAAO,MAAOQ,UAAW,UACnCC,cAAe,CACX/B,WAAY,KACZsB,MAAO,MACPU,aAAc,OAElBC,eAAgB,CAAEX,MAAO,WAEbnB,GA5CI,EA+CoChD,IAAMwC,WAC1DzC,GADIuB,EA/CY,EA+CZA,SAAUT,EA/CE,EA+CFA,eAAgBf,EA/Cd,EA+CcA,KAAMoB,EA/CpB,EA+CoBA,YAGxC6D,QAAQC,IAAI,oBAAqBlF,GAEjC,IAAMmF,EAASC,OAAOC,KAAK7D,GApDP,EAuDqB2B,mBAASgC,EAAO,IAvDrC,mBAuDbG,EAvDa,KAuDAC,EAvDA,OAwDiBpC,mBAAS,IAxD1B,mBAwDbqC,EAxDa,KAwDFC,EAxDE,OAyDuBtC,mBAAS,GAzDhC,mBAyDbuC,EAzDa,KAyDCC,EAzDD,KAkFpB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAWC,KAAK,MACZ,kBAACC,EAAA,EAAD,CAAOvC,UAAWZ,EAAQoB,MACtB,kBAACgC,EAAA,EAAD,CACIlC,QAAQ,KACRmC,UAAU,KACV7D,MAAO,CACHC,gBAAiB,QACjB4B,QAAS,cALjB,cAUA,yBAAKT,UAAWZ,EAAQuB,MACpB,yBAAKX,UAAWZ,EAAQ+B,WACxB,yBAAKnB,UAAWZ,EAAQgC,WACpB,kBAACoB,EAAA,EAAD,CACIlC,QAAQ,KACRmC,UAAU,KACV7D,MAAO,CAAE8D,WAAY,WAEpBX,KAIb,yBAAK/B,UAAWZ,EAAQuB,MACpB,yBAAKX,UAAWZ,EAAQyB,cACpB,kBAAC8B,EAAA,EAAD,KACKf,EAAOgB,KAAI,SAACtF,EAAOuF,GAAR,OACR,kBAAC,EAAD,CACIC,IAAKxF,EACLoB,WAAYmE,EACZvF,MAAOA,EACPmB,UAAW0D,EACX3D,SAAU,SAAA0B,GACN8B,EACI9B,EAAEC,OAAO4C,WAEbX,EAAmBS,WAOvC,yBAAK7C,UAAS,UAAKZ,EAAQ6B,WAAb,MACV,yBACIrC,MAAO,CACH8B,UAAW,OACXsC,YAAa,OACbC,cAAe,SAJvB,2BASChF,EAAS8D,GAAaa,KAAI,SAACM,EAAML,GAAP,OACvB,oCACKK,EAAK7F,IAAI8F,OAAS,GACf,yBACInD,UAAU,qBACV8C,IAAKI,EACLtE,MAAO,CACHkC,MAAO,QAGX,yBAAKd,UAAU,6BACVkD,EAAK9F,MAGV,yBACI4C,UAAU,YACVpB,MAAO,CAAEwE,SAAU,SAEnB,kBAACZ,EAAA,EAAD,CAAYlC,QAAQ,SACf4C,EAAK7F,OAKlB,yBACI2C,UAAU,qBACV8C,IAAKI,EACLtE,MAAO,CACHkC,MAAO,SAGX,yBAAKd,UAAU,6BACVkD,EAAK9F,MAGV,yBACI4C,UAAU,YACVpB,MAAO,CAAEwE,SAAU,SAEnB,kBAACZ,EAAA,EAAD,CAAYlC,QAAQ,SACf4C,EAAK7F,aAStC,yBAAK2C,UAAWZ,EAAQuB,MACpB,kBAAC,EAAD,MACA,yBAAKX,UAAWZ,EAAQmC,eACpB,kBAACzB,EAAA,EAAD,CACIC,MAAM,iBACNC,UAAWZ,EAAQiC,QACnB5D,MAAOwE,EACPhC,SAAU,SAAAC,GAAC,OAAIgC,EAAgBhC,EAAEC,OAAO1C,QACxC4F,UAvIN,SAAAnD,GACJ,UAAVA,EAAE4C,MACqB,KAAnB5C,EAAEC,OAAO1C,OAQLD,EAPCf,EAOc,CACXW,KAAMX,EACNY,IAAK4E,EACL3E,MAAOyE,GATI,CACX3E,KAAMS,IACNR,IAAK4E,EACL3E,MAAOyE,IAWnBG,EAAgB,SAwHJ,yBAAKlC,UAAWZ,EAAQqC,gBACpB,kBAAC6B,EAAA,EAAD,CACIhD,QAAQ,YACRiD,MAAM,UACNvD,UAAWZ,EAAQN,OACnBC,QAAS,WACa,KAAdkD,GAQIzE,EAPCf,EAOc,CACXW,KAAMX,EACNY,IAAK4E,EACL3E,MAAOyE,GATI,CACX3E,KAAMS,IACNR,IAAK4E,EACL3E,MAAOyE,IAUnBG,EAAgB,MApBxB,cCxMbsB,MAVf,WACI,OACI,yBAAKxD,UAAU,OACX,kBAAClC,EAAD,KACI,kBAAC,EAAD,SCII2F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b3267570.chunk.js","sourcesContent":["import React from \"react\";\r\nimport io from \"socket.io-client\";\r\n//  Object\r\n/*\r\nmsg{\r\n    from: 'user'\r\n    msg: 'test'\r\n    topic :\"general\"\r\n}\r\n\r\nstate:{\r\n    topic1:{\r\n        {msg1},{msg2},{msg3}\r\n    }\r\n    topic2:{\r\n        {msg1},{msg2},{msg3}\r\n    }\r\n}\r\n*/\r\n\r\nexport const CTX = React.createContext();\r\n\r\nconst initialState = {\r\n    General: [],\r\n    Math: [],\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    const { from, msg, topic } = action.payload;\r\n    switch (action.type) {\r\n        case \"RECEIVE_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                //the action\r\n                [topic]: [\r\n                    //adding messages onto the old message\r\n                    ...state[topic],\r\n                    {\r\n                        from,\r\n                        msg,\r\n                    },\r\n                ],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nlet socket;\r\nfunction sendChatAction(value) {\r\n    socket.emit(\"chat message\", value);\r\n}\r\nlet user;\r\nfunction newUsername(username) {\r\n    user = username;\r\n}\r\n\r\nfunction getUsername() {\r\n    return user;\r\n}\r\n\r\nexport default function Store(props) {\r\n    const [allChats, dispatch] = React.useReducer(reducer, initialState);\r\n    if (!socket) {\r\n        socket = io(\":8080\");\r\n        socket.on(\"chat message\", function(msg) {\r\n            dispatch({ type: \"RECEIVE_MESSAGE\", payload: msg });\r\n        });\r\n    }\r\n\r\n    return (\r\n        <CTX.Provider\r\n            value={{ allChats, sendChatAction, user, newUsername, getUsername }}\r\n        >\r\n            {props.children}\r\n        </CTX.Provider>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ListItem, ListItemText } from \"@material-ui/core\";\r\n\r\nconst ListItems = ({ topic, callback, currIndex, topicIndex }) => {\r\n    return (\r\n        <>\r\n            {currIndex === topicIndex ? (\r\n                <ListItem\r\n                    style={{\r\n                        backgroundColor: \"rgb(105, 154, 219)\",\r\n                    }}\r\n                    button\r\n                    onClick={callback}\r\n                >\r\n                    <ListItemText primary={topic} />\r\n                </ListItem>\r\n            ) : (\r\n                <ListItem\r\n                    style={{\r\n                        backgroundColor: \"\",\r\n                    }}\r\n                    button\r\n                    onClick={callback}\r\n                >\r\n                    <ListItemText primary={topic} />\r\n                </ListItem>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListItems;\r\n","import React, { useState } from \"react\";\r\nimport { TextField, makeStyles } from \"@material-ui/core\";\r\nimport { CTX } from \"../Store\";\r\nconst Input = () => {\r\n    //CTX Store\r\n    const { newUsername } = React.useContext(CTX);\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n        },\r\n    }));\r\n    const classes = useStyles();\r\n    const [username, changeUsername] = useState(\"\");\r\n    return (\r\n        <TextField\r\n            label=\"Username\"\r\n            className={classes.textField}\r\n            value={username}\r\n            onChange={e => {\r\n                changeUsername(e.target.value);\r\n            }}\r\n            onBlur={newUsername(username)}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Paper,\r\n    makeStyles,\r\n    Typography,\r\n    List,\r\n    Button,\r\n    TextField,\r\n    Container,\r\n} from \"@material-ui/core\";\r\n\r\nimport { CTX } from \"../Store\";\r\nimport ListItems from \"./ListItems\";\r\nimport Input from \"./Input\";\r\n\r\nconst Dashboard = () => {\r\n    const useStyles = makeStyles(theme => ({\r\n        root: {\r\n            margin: \"20px 100px 0 100px\",\r\n            padding: theme.spacing(3, 2),\r\n            textAlign: \"center\",\r\n            backgroundColor: \"rgba(109, 218, 233, 0.671)\",\r\n        },\r\n        flex: {\r\n            display: \"flex\",\r\n            // alignItems: \"center\",\r\n        },\r\n        topicsWindow: {\r\n            width: \"30%\",\r\n            height: \"400px\",\r\n            marginRight: \"1rem\",\r\n            overflowY: \"auto\",\r\n        },\r\n        chatWindow: {\r\n            width: \"70%\",\r\n            borderLeft: \"1px inset grey\",\r\n            height: \"400px\",\r\n            overflowY: \"auto\",\r\n            // overflowX: \"hidden\",\r\n        },\r\n        chatLeft: {\r\n            width: \"30%\",\r\n        },\r\n        chatTopic: {\r\n            margin: \"1rem 0\",\r\n            width: \"70%\",\r\n        },\r\n        chatBox: {\r\n            marginTop: \"1rem\",\r\n            width: \"85%\",\r\n        },\r\n        button: { width: \"15%\", marginTop: \"1.5rem\" },\r\n        messengerLeft: {\r\n            marginLeft: \"5%\",\r\n            width: \"60%\",\r\n            borderRadius: \"5px\",\r\n        },\r\n        messengerRight: { width: \"auto\" },\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    //CTX Store\r\n    const { allChats, sendChatAction, user, getUsername } = React.useContext(\r\n        CTX,\r\n    );\r\n    console.log(\"user in dashboard\", user);\r\n\r\n    const topics = Object.keys(allChats);\r\n\r\n    // local state\r\n    const [activeTopic, changeActiveTopic] = useState(topics[0]);\r\n    const [textValue, changeTextValue] = useState(\"\");\r\n    const [currentIndex, changeCurrentIndex] = useState(0);\r\n\r\n    //if press enter, check if there text if there is then emit the message\r\n    const handleKeyDown = e => {\r\n        if (e.key === \"Enter\") {\r\n            if (e.target.value !== \"\") {\r\n                if (!user) {\r\n                    sendChatAction({\r\n                        from: getUsername(),\r\n                        msg: textValue,\r\n                        topic: activeTopic,\r\n                    });\r\n                } else {\r\n                    sendChatAction({\r\n                        from: user,\r\n                        msg: textValue,\r\n                        topic: activeTopic,\r\n                    });\r\n                }\r\n            }\r\n\r\n            changeTextValue(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Container size=\"lg\">\r\n                <Paper className={classes.root}>\r\n                    <Typography\r\n                        variant=\"h4\"\r\n                        component=\"h4\"\r\n                        style={{\r\n                            backgroundColor: \"white\",\r\n                            padding: \"24px 16px\",\r\n                        }}\r\n                    >\r\n                        Let's Chat\r\n                    </Typography>\r\n                    <div className={classes.flex}>\r\n                        <div className={classes.chatLeft}></div>\r\n                        <div className={classes.chatTopic}>\r\n                            <Typography\r\n                                variant=\"h5\"\r\n                                component=\"h5\"\r\n                                style={{ fontWeight: \"bolder\" }}\r\n                            >\r\n                                {activeTopic}\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.flex}>\r\n                        <div className={classes.topicsWindow}>\r\n                            <List>\r\n                                {topics.map((topic, index) => (\r\n                                    <ListItems\r\n                                        key={topic}\r\n                                        topicIndex={index}\r\n                                        topic={topic}\r\n                                        currIndex={currentIndex}\r\n                                        callback={e => {\r\n                                            changeActiveTopic(\r\n                                                e.target.innerText,\r\n                                            );\r\n                                            changeCurrentIndex(index);\r\n                                        }}\r\n                                    />\r\n                                ))}\r\n                            </List>\r\n                        </div>\r\n\r\n                        <div className={`${classes.chatWindow} `}>\r\n                            <div\r\n                                style={{\r\n                                    textAlign: \"left\",\r\n                                    paddingLeft: \"2rem\",\r\n                                    paddingBottom: \"1rem\",\r\n                                }}\r\n                            >\r\n                                Welcome to the chatroom\r\n                            </div>\r\n                            {allChats[activeTopic].map((chat, index) => (\r\n                                <>\r\n                                    {chat.msg.length > 50 ? (\r\n                                        <div\r\n                                            className=\"talk-bubble round \"\r\n                                            key={chat}\r\n                                            style={{\r\n                                                width: \"90%\",\r\n                                            }}\r\n                                        >\r\n                                            <div className=\"chatItems chatItems__user\">\r\n                                                {chat.from}\r\n                                            </div>\r\n\r\n                                            <div\r\n                                                className=\"chatItems\"\r\n                                                style={{ maxWidth: \"100%\" }}\r\n                                            >\r\n                                                <Typography variant=\"body1\">\r\n                                                    {chat.msg}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div\r\n                                            className=\"talk-bubble round \"\r\n                                            key={chat}\r\n                                            style={{\r\n                                                width: \"auto\",\r\n                                            }}\r\n                                        >\r\n                                            <div className=\"chatItems chatItems__user\">\r\n                                                {chat.from}\r\n                                            </div>\r\n\r\n                                            <div\r\n                                                className=\"chatItems\"\r\n                                                style={{ maxWidth: \"100%\" }}\r\n                                            >\r\n                                                <Typography variant=\"body1\">\r\n                                                    {chat.msg}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.flex}>\r\n                        <Input />\r\n                        <div className={classes.messengerLeft}>\r\n                            <TextField\r\n                                label=\"Send a message\"\r\n                                className={classes.chatBox}\r\n                                value={textValue}\r\n                                onChange={e => changeTextValue(e.target.value)}\r\n                                onKeyDown={handleKeyDown}\r\n                            />\r\n                        </div>\r\n                        <div className={classes.messengerRight}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                onClick={() => {\r\n                                    if (textValue !== \"\") {\r\n                                        if (!user) {\r\n                                            sendChatAction({\r\n                                                from: getUsername(),\r\n                                                msg: textValue,\r\n                                                topic: activeTopic,\r\n                                            });\r\n                                        } else {\r\n                                            sendChatAction({\r\n                                                from: user,\r\n                                                msg: textValue,\r\n                                                topic: activeTopic,\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                    changeTextValue(\"\");\r\n                                }}\r\n                            >\r\n                                Send\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Paper>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport \"./css/style.min.css\";\r\nimport Dashboard from \"./Component/Dashboard\";\r\nimport Store from \"./Store\";\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Store>\r\n                <Dashboard />\r\n            </Store>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}